spring.application.name=spring-sqlite

# PORT
# server.port=${port:8080}

# DATABASE
# Correcto, la opción "?cache=shared" es más adecuada para bases de datos 
# en memoria que necesitan compartir caché entre múltiples conexiones. 
# Si ya tienes una base de datos SQL con valores en una tabla, esta 
# configuración no sería necesaria ni beneficiosa.
# Note that we need to keep the cache as shared in order to keep the database 
# updates visible across multiple database connections.
# spring.datasource.url=jdbc:sqlite:memory:test.db?cache=shared

# Para una base de datos persistente, deberías usar una URL de conexión que 
# apunte a la ubicación de tu base de datos en disco. Por ejemplo, para 
# una base de datos SQLite almacenada en un archivo, podrías usar algo como:
spring.datasource.url=jdbc:sqlite:test.db
# Esto asegurará que tu aplicación Spring Boot se conecte a la base de 
# datos existente y pueda acceder a los datos almacenados en tus tablas.

spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=org.sqlite.JDBC
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLiteDialect


# JPA
# spring.jpa.database-platform=com.treizer.spring_sqlite.config.dialect.SQLiteDialect

# With the next one statement is enough to the program connect to SQLite.
# You don't need create and configure the "dialect.SQLiteDialiect.java", therefore
# you either need the statement under "# JPA", but always need being created the
# "DatasourceConfig", but if something go wrong you can find the SQLiteDialect.java 
# outside this project in the same level like ".txt" files
spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# Security Config
# Static
# spring.security.user.name=treizer
# spring.security.user.password=1234
